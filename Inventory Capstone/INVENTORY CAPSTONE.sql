--QUERY TO CREATE NEW DATABASE
CREATE DATABASE INVENTORY;


--QUERY TO ACCESS THE DATABASE
USE INVENTORY;


--QUERY TO CREATE TABLE ==> PRODUCT
CREATE TABLE PRODUCT (
PID CHAR(5) PRIMARY KEY,								-- PRIMARY KEY BEING GIVEN TO PID
PDESC nVARCHAR(30) NOT NULL,							-- NOT NULL ALLOWS US TO DEFINE PDESC WITHOUT KEEPING IT EMPTY
PRICE INT,
CATEGORY nVARCHAR(30),
SID CHAR(5));											-- AT PRESENT FOREIGN KEY IS NOT BEING APPLIED BECAUSE SUPPLIER TABLE HAS BEEN CREATED AFTER PRODUCT TABLE

SELECT * FROM PRODUCT;


--QUERY TO CREATE TABLE ==> SUPPLIER
CREATE TABLE SUPPLIER (
SID CHAR(5) PRIMARY KEY,								-- PRIMARY KEY BEING GIVEN TO SID
SNAME nVARCHAR(50) NOT NULL,							-- NOT NULL ALLOWS US TO NOT KEEP THE COLUMN EMPTY
SADDR nVARCHAR(50) NOT NULL,							-- NOT NULL ALLOWS US TO NOT KEEP THE COLUMN EMPTY
SCITY nVARCHAR(30) DEFAULT 'DELHI',						-- IF NOTHING IS APPLIED THEN SQL WILL ADD DELHI AS DEFAULT CITY
SPHONE BIGINT UNIQUE,									-- TO AVOID THE NUMBER BEING REPEATED
SMAIL nVARCHAR(50) UNIQUE);								-- TO AVOID THE EMAIL BEING REPEATED

SELECT * FROM SUPPLIER;


--QUERY TO ADD FOREIGN KEY FOR SID IN PRODUCT TABLE
ALTER TABLE PRODUCT
ADD CONSTRAINT FK_ID FOREIGN KEY (SID)					-- FOREIGN KEY "FK_ID" WILL BE APPLIED ON SID FROM PRODUCT TABLE
REFERENCES SUPPLIER(SID);


--QUERY TO CREATE TABLE ==> CUSTOMER
CREATE TABLE CUSTOMER (
CID CHAR(5) PRIMARY KEY,								-- PRIMARY KEY BEING GIVEN TO CID
CNAME nVARCHAR(50) NOT NULL,							-- NOT NULL ALLOWS US TO NOT KEEP THE COLUMN EMPTY
CADDR nVARCHAR(50) NOT NULL,							-- NOT NULL ALLOWS US TO NOT KEEP THE COLUMN EMPTY
CCITY nVARCHAR(30) NOT NULL,							-- NOT NULL ALLOWS US TO NOT KEEP THE COLUMN EMPTY
CPHONE BIGINT NOT NULL,									-- NOT NULL ALLOWS US TO NOT KEEP THE COLUMN EMPTY
CMAIL nVARCHAR(50) NOT NULL,							-- NOT NULL ALLOWS US TO NOT KEEP THE COLUMN EMPTY
DOB DATE CHECK(DOB < '01-01-2020'));					-- CHECK CONSTRAINT WILL SEE DOB TO BE LESS THAN 01-JAN-2020

SELECT * FROM CUSTOMER;


--QUERY TO CREATE TABLE ==> ORDERS
CREATE TABLE ORDERS (
OID CHAR(5) PRIMARY KEY,								-- PRIMARY KEY BEING GIVEN TO OID
ODATE DATE,
CID CHAR(5) REFERENCES CUSTOMER(CID),					-- FOREIGN KEY BEING APPLIED ON CID
PID CHAR(5) REFERENCES PRODUCT(PID),					-- FOREIGN KEY BEING APPLIED ON PID
OQTY INT CHECK(OQTY >=1));								-- CHECK CONSTRAINT WILL SEE OQTY TO BE GREATER THAN EQUAL TO 1

SELECT * FROM ORDERS;


--QUERY TO CREATE TABLE ==> STOCK
CREATE TABLE STOCK (
PID CHAR(5) REFERENCES PRODUCT(PID),					-- FOREIGN KEY BEING APPLIED ON PID
SQTY INT CHECK (SQTY >=0),								-- CHECK CONSTRAINT WILL SEE SQTY TO BE GREATER THAN EQUAL TO 0
ROL INT CHECK (ROL >0),									-- CHECK CONSTRAINT WILL SEE OQTY TO BE GREATER THAN 0
MOQ INT CHECK (MOQ >=5));								-- CHECK CONSTRAINT WILL SEE OQTY TO BE GREATER THAN EQUAL TO 5

SELECT * FROM STOCK;


--QUERY TO GET THE OUTPUT FROM THE TABLE
SELECT * FROM PRODUCT;
SELECT * FROM SUPPLIER;
SELECT * FROM CUSTOMER;
SELECT * FROM ORDERS;
SELECT * FROM STOCK;


-- QUERY TO EXTRACT THE COLUMN NAMES ASKED IN FIRST QUESTION USING PRIMARY KEY AND FOREIGN KEY
SELECT P.PID, P.PDESC,P.CATEGORY,S.SNAME,S.SCITY								-- P is used as alias for PRODUCT table and S as alias for SUPPLIER table
FROM PRODUCT P, SUPPLIER S
WHERE P.SID = S.SID;															-- SID of PRODUCT is Foreign Key and SID of SUPPLIER is Primary Key

-- QUERY TO EXTRACT THE COLUMN NAMES ASKED IN FIRST QUESTION USING INNER JOIN
SELECT P.PID, P.PDESC,P.CATEGORY,S.SNAME,S.SCITY 
FROM PRODUCT P
INNER JOIN SUPPLIER S															-- Using any join, the resultant column will be same for all.
ON P.SID = S.SID;


-- QUERY TO EXTRACT THE COLUMN NAMES ASKED IN SECOND QUESTION USING PRIMARY KEY AND FOREIGN KEY
SELECT O.OID, O.ODATE, C.CNAME,C.CADDR,C.CPHONE,P.PDESC,P.PRICE,O.OQTY,AMOUNT=P.PRICE*O.OQTY			-- P as alias for PRODUCT table, C as alias for CUSTOMER table, O as alias for ORDERS table
FROM ORDERS O,CUSTOMER C,PRODUCT P
WHERE O.PID=P.PID AND O.CID=C.CID;

-- QUERY TO EXTRACT THE COLUMN NAMES ASKED IN SECOND QUESTION USING INNER JOIN
SELECT O.OID, O.ODATE, C.CNAME,C.CADDR,C.CPHONE,P.PDESC,P.PRICE,O.OQTY,AMOUNT=P.PRICE*O.OQTY			-- O as alias for ORDERS table, C as alias for CUSTOMER table, P as alias for PRODUCT table
FROM ORDERS O
INNER JOIN CUSTOMER C																					-- Using any join, the resultant column will be same for all.
ON O.CID=C.CID
INNER JOIN PRODUCT P																					-- Using any join, the resultant column will be same for all.
ON O.PID=P.PID;


-- QUERY TO CREATE VIEW TO GET THE OUTPUT FOR THE SECOND QUESTION
CREATE VIEW BILL
AS
	SELECT O.OID, O.ODATE, C.CNAME,C.CADDR,C.CPHONE,P.PDESC,P.PRICE,O.OQTY,AMOUNT=P.PRICE*O.OQTY
	FROM ORDERS O,CUSTOMER C,PRODUCT P
	WHERE O.PID=P.PID AND O.CID=C.CID;

-- QUERY TO GET THE OUTPUT OF VIEW COMMAND
SELECT * FROM BILL;


-- QUERY TO CREATE PROCEDURE FOR SUPPLIER TABLE
CREATE PROCEDURE ADDSUPPLIER (@I CHAR(5),@N nVARCHAR(50),@A nVARCHAR(50),@C nVARCHAR(30),@P BIGINT,@M nVARCHAR(50))
AS
BEGIN
	INSERT INTO SUPPLIER
	VALUES (@I,@N,@A,@C,@P,@M);

	SELECT * FROM SUPPLIER;
END;

-- QUERY TO EXECUTE THE PROCEDURE FOR SUPPLIER TABLE
EXEC ADDSUPPLIER 'S0001','ROYAL SUPPLIERS','SECTOR-12, MATHURA ROAD','VARANASI',9865742365,'ROYALSUPP@GMAIL.COM';


-- QUERY TO CREATE PROCEDURE FOR PRODUCT TABLE
CREATE PROCEDURE ADDPRO (@PI CHAR(5),@PD nVARCHAR(30),@PP INT,@PC nVARCHAR(30),@PS CHAR(5))
AS
BEGIN
	INSERT INTO PRODUCT
	VALUES (@PI,@PD,@PP,@PC,@PS);

	SELECT * FROM PRODUCT;
END;

--QUERY TO EXECUTE THE PROCEDURE FOR PRODUCT TABLE
EXEC ADDPRO 'P0001','HEAD AND SHOULDERS',240,'SHAMPOO','S0001';


-- QUERY TO CREATE PROCEDURE FOR CUSTOMER TABLE
CREATE PROCEDURE ADDCUST (@CI CHAR(5),@CN nVARCHAR(50),@CA nVARCHAR(50),@CC nVARCHAR(30),@CP BIGINT,@CM nVARCHAR(50),@CD DATE)
AS
BEGIN
	INSERT INTO CUSTOMER
	VALUES (@CI,@CN,@CA,@CC,@CP,@CM,@CD);

	SELECT * FROM CUSTOMER;
END;

-- QUERY TO EXECUTE THE PROCEDURE FOR CUSTOMER TABLE
EXEC ADDCUST 'C0001','CHANDRAKANT PANJAL','NANA VARACHHA ROAD','SURAT',7865489651,'CHNDZZPANJ@GMAIL.COM','05-02-1995';


-- QUERY TO CREATE PROCEDURE FOR ORDERS TABLE
CREATE PROCEDURE ADDORDER (@OI CHAR(5),@OC CHAR(5),@OP CHAR(5),@OQ INT)
AS
BEGIN
	INSERT INTO ORDERS
	VALUES (@OI,GETDATE(),@OC,@OP,@OQ);

	SELECT * FROM ORDERS;
END;

-- QUERY TO EXECUTE THE PROCEDURE FOR ORDERS TABLE
EXEC ADDORDER 'O0001','C0001','P0001',28;


-- QUERY TO CREATE A FUNCTION FOR THE GENERATION OF ALPHA-NUMERIC ID AUTOMATICALLY
CREATE FUNCTION AUTOID (@C CHAR(1),@N INT)
RETURNS CHAR(5)
AS
BEGIN
	DECLARE @ID AS CHAR(5)=CASE										-- DECLARING @ID WITH CASE STATEMENT TO GET DESIRED OUTPUT BASED ON THE CONDTION SATISFIED
	WHEN @N<10 THEN CONCAT(@C,'000',@N)
	WHEN @N<100 THEN CONCAT(@C,'00',@N)
	WHEN @N<1000 THEN CONCAT(@C,'0',@N)
	WHEN @N<10000 THEN CONCAT(@C,@N)
	END;
RETURN @ID
END;

-- QUERY TO GET THE OUTPUT OF AUTO-GENERATING THE ID
PRINT DBO.AUTOID ('O',95);	 											-- USE PRINT COMMAND TO GET ONLY ID WITHOUT TABLE FORM
PRINT DBO.AUTOID('C',785);
SELECT DBO.AUTOID('A',95) AS 'GENERATED ID';							-- USE SELECT COMMAND TO GET ID IN TABLE FORM


-- QUERY TO DROP ALL THE PROCEDURES CREATED
DROP PROCEDURE ADDSUPPLIER;
DROP PROCEDURE ADDPRO;
DROP PROCEDURE ADDCUST;
DROP PROCEDURE ADDORDER;


-- QUERY TO DELETE THE DATA FROM TABLES
DELETE ORDERS;
DELETE CUSTOMER;
DELETE PRODUCT;
DELETE SUPPLIER;


-- QUERY TO CREATE A SEQUENCE FOR SUPPLIER TABLE
CREATE SEQUENCE SNUM
AS INT
START WITH 1
INCREMENT BY 1;

-- QUERY TO CREATE PROCEDURE FOR SUPPLIER TABLE BY GENERATING SID AUTOMATICALLY
CREATE PROCEDURE ADDSUPPLIER (@N nVARCHAR(50),@A nVARCHAR(50),@C nVARCHAR(30),@P BIGINT,@M nVARCHAR(50))
AS
BEGIN
	DECLARE @I INT												-- DECLARING INT
	DECLARE @ID CHAR(5)											-- DECLARING ID
		SET @I = (NEXT VALUE FOR SNUM)							-- ASSIGNING @I AS VALUE TAKEN FROM CREATED SEQUENCE
		SET @ID = DBO.AUTOID ('S',@I)							-- ASSIGNING @ID AS VALUE TAKEN FROM CREATED FUNCTION
	INSERT INTO SUPPLIER
	VALUES (@ID,@N,@A,@C,@P,@M);

	SELECT * FROM SUPPLIER;
END;

-- QUERY TO EXECUTE THE PROCEDURE
EXEC ADDSUPPLIER 'ROYAL SUPPLIERS','SECTOR-12, MATHURA ROAD','VARANASI',9865742365,'ROYALSUPP@GMAIL.COM';


-- QUERY TO CREATE A SEQUENCE FOR PRODUCT TABLE
CREATE SEQUENCE PNUM
AS INT
START WITH 1
INCREMENT BY 1;

-- QUERY TO CREATE PROCEDURE FOR PRODUCT TABLE BY GENERATING PID AUTOMATICALLY
CREATE PROCEDURE ADDPRO (@PD nVARCHAR(30),@PP INT,@PC nVARCHAR(30),@PS CHAR(5))
AS
BEGIN
	DECLARE @I INT												-- DECLARING INT
	DECLARE @ID CHAR(5)											-- DECLARING ID
		SET @I = (NEXT VALUE FOR PNUM)							-- ASSIGNING @I AS VALUE TAKEN FROM CREATED SEQUENCE
		SET @ID = DBO.AUTOID ('P',@I)							-- ASSIGNING @ID AS VALUE TAKEN FROM CREATED FUNCTION
	INSERT INTO PRODUCT
	VALUES (@ID,@PD,@PP,@PC,@PS);

	SELECT * FROM PRODUCT;
END;

-- QUERY TO EXECUTE THE PROCEDURE FOR CUSTOMER TABLE
EXEC ADDPRO 'HEAD AND SHOULDERS',240,'SHAMPOO','S0001';


-- QUERY TO CREATE A SEQUENCE FOR CUSTOMER TABLE
CREATE SEQUENCE CNUM
AS INT
START WITH 1
INCREMENT BY 1;

-- QUERY TO CREATE PROCEDURE FOR CUSTOMER TABLE BY GENERATING CID AUTOMATICALLY
CREATE PROCEDURE ADDCUST (@CN nVARCHAR(50),@CA nVARCHAR(50),@CC nVARCHAR(30),@CP BIGINT,@CM nVARCHAR(50),@CD DATE)
AS
BEGIN
	DECLARE @I INT												-- DECLARING INT
	DECLARE @ID CHAR(5)											-- DECLARING ID
		SET @I = (NEXT VALUE FOR CNUM)							-- ASSIGNING @I AS VALUE TAKEN FROM CREATED SEQUENCE
		SET @ID = DBO.AUTOID ('C',@I)							-- ASSIGNING @ID AS VALUE TAKEN FROM CREATED FUNCTION
	INSERT INTO CUSTOMER
	VALUES (@ID,@CN,@CA,@CC,@CP,@CM,@CD);

	SELECT * FROM CUSTOMER;
END;

-- QUERY TO EXECUTE THE PROCEDURE FOR CUSTOMER TABLE
EXEC ADDCUST 'CHANDRAKANT PANJAL','NANA VARACHHA ROAD','SURAT',7865489651,'CHNDZZPANJ@GMAIL.COM','05-02-1995';


-- QUERY TO CREATE A SEQUENCE FOR ORDER TABLE
CREATE SEQUENCE ONUM
AS INT
START WITH 1
INCREMENT BY 1;

-- QUERY TO CREATE PROCEDURE FOR CUSTOMER TABLE BY GENERATING CID AUTOMATICALLY
CREATE PROCEDURE ADDORDER (@OC CHAR(5),@OP CHAR(5),@OQ INT)
AS
BEGIN
	DECLARE @I INT												-- DECLARING INT
	DECLARE @ID CHAR(5)											-- DECLARING ID
		SET @I = (NEXT VALUE FOR ONUM)							-- ASSIGNING @I AS VALUE TAKEN FROM CREATED SEQUENCE
		SET @ID = DBO.AUTOID ('O',@I)							-- ASSIGNING @ID AS VALUE TAKEN FROM CREATED FUNCTION
	INSERT INTO ORDERS
	VALUES (@ID,GETDATE(),@OC,@OP,@OQ);

	SELECT * FROM ORDERS;										
END;

-- QUERY TO EXECUTE THE PROCEDURE
EXEC ADDORDER 'C0001','P0001',28;